#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 3677 0 17 3 12 #";;Problem 1:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Combination is "
0 0 23 29 1 #"\n"
0 0 17 3 21 #";(list Symbol Number)"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";;[Listof Symbol] [Listof Number] -> [Listof Combination]"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";;The function consumes a list of symbols and a list of numbers and "
0 0 23 29 1 #"\n"
0 0 17 3 61
#";;produces all possible ordered pairs of symbols and numbers."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 48 #";;Symbol [Listof number] -> [Listof Combination]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 67
#";;Given a symbol and a list of number. Make each number in the list"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 24 #";;pair with that symbol."
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 3 #"lon"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 4 #"))  "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 23 3 1 #" "
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 4 #"pair"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #")) "
0 0 14 3 3 #"los"
0 0 23 3 6 #"))])))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cross"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 2:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 8 #"employee"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";;An employee is (make-employee String Number Number) "
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";;(make-employee n s p) which n is the name of the employee,"
0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #";;s is the social security number, p is the pay rate of the employee"
 #" in hour."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 11 #"work-record"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"h"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; A work-record is (make-work-record String Number)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";;(make-work-record n h) which n is the name of the employee, h is t"
 #"he "
) 0 0 23 29 1 #"\n"
0 0 17 3 33 #";;number of hours work in a week."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 13 #"employee-wage"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";;A newemployee is (make-newemployee String Number)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";;(make-newemployee n w) which n is the name of the employee, w is t"
 #"he weekly wage "
) 0 0 23 29 1 #"\n"
0 0 17 3 17 #";;of the employee"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"employee1"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-employee"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 9 #"001925096"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"employee2"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-employee"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 23 3 1 #" "
0 0 20 3 9 #"194833989"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"record1"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-work-record"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"record2"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-work-record"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loe0"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loe1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 9 #"employee1"
0 0 23 3 1 #" "
0 0 14 3 9 #"employee2"
0 0 23 3 18 #"))                "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low0"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"record1"
0 0 23 3 1 #" "
0 0 14 3 7 #"record2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lon1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 18 #"make-employee-wage"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 3 #"800"
0 0 23 3 3 #") ("
0 0 14 3 18 #"make-employee-wage"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 23 3 1 #" "
0 0 20 3 3 #"300"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";;[Listof employee] [Listof work-record] -> [Listof newemployee]"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";;Given a list of employee and a list of word-record returns a list "
 #"of newemployee."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v2"
0 0 23 3 1 #" "
0 0 14 3 3 #"loe"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 55 #";;Employee [Listof work-record] -> [Listof newemployee]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 42 #";;Given a employee then search the respons"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"search"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 3 2 #"[("
0 0 14 3 8 #"string=?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"employee-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #") ("
0 0 14 3 13 #"work-record-n"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 18 #"make-employee-wage"
0 0 23 3 2 #" ("
0 0 14 3 10 #"employee-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 13 #"work-record-h"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 4 #")) ("
0 0 14 3 10 #"employee-p"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"search"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 6 #"))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"loe"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 3 #") ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 18 #"make-employee-wage"
0 0 23 3 2 #" ("
0 0 14 3 10 #"employee-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 3 #"loe"
0 0 23 3 26 #")]                        "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 6 #"search"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 3 #")) "
0 0 14 3 3 #"loe"
0 0 23 3 5 #")])))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v2"
0 0 23 3 1 #" "
0 0 14 3 4 #"loe1"
0 0 23 3 1 #" "
0 0 14 3 4 #"low1"
0 0 23 3 2 #") "
0 0 14 3 4 #"lon1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v2"
0 0 23 3 1 #" "
0 0 14 3 4 #"loe0"
0 0 23 3 1 #" "
0 0 14 3 4 #"low1"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v2"
0 0 23 3 1 #" "
0 0 14 3 4 #"loe1"
0 0 23 3 1 #" "
0 0 14 3 4 #"low0"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 18 #"make-employee-wage"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 18 #"make-employee-wage"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 3:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 12 #"phone-record"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 6 #"number"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; A PhoneRecord is (make-phone-record String String)."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 3 #"  ("
0 0 14 3 17 #"make-phone-record"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 19 3 12 #"\"3848303890\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 3 #"  ("
0 0 14 3 17 #"make-phone-record"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Jason\""
0 0 23 3 1 #" "
0 0 19 3 12 #"\"2394947590\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lon0"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lop0"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"lon01"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Jason\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"lop01"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"3848303890\""
0 0 23 3 1 #" "
0 0 19 3 12 #"\"2394947590\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";;[Listof String] [Listof String] -> [Listof Phone-record]"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";;Given  a list of names and a list phone numbers,"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;then combines those equally long lists into a list of phone record"
 #"s."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-phone-record"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 3 #"zip"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 23 3 1 #" "
0 0 14 3 4 #"lon0"
0 0 23 3 1 #" "
0 0 14 3 4 #"lop0"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 23 3 1 #" "
0 0 14 3 5 #"lon01"
0 0 23 3 1 #" "
0 0 14 3 5 #"lop01"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 4:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 10 #"punch-card"
0 0 23 3 2 #" ("
0 0 14 3 6 #"number"
0 0 23 3 1 #" "
0 0 14 3 5 #"hours"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; A punch-card is (make-punch-card Number Number)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";;(make-punch-card number hours) which number is the employee number"
 #","
) 0 0 23 29 1 #"\n"
0 0 17 3 47 #";;hours is the number of hours worked per week."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 15 #"employee-record"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 6 #"number"
0 0 23 3 1 #" "
0 0 14 3 4 #"rate"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";;A employee-record is (make-employee-record String Number Number)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";;(make-employee-record name number rate) which name is the name of "
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";;the employee, number is the number of the employee, rate is the pa"
 #"y"
) 0 0 23 29 1 #"\n"
0 0 17 3 24 #";;rate counted in hours."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 11 #"wage-record"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; A work-record is (make-wage-record String Number)"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;Interpretation:"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";;(make-wage-record n h) which n is the name of the employee, w is "
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; the weekly wage of an employee."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"punch-card1"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-punch-card"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"punch-card2"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-punch-card"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record1"
0 0 23 3 2 #" ("
0 0 14 3 20 #"make-employee-record"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record2"
0 0 23 3 2 #" ("
0 0 14 3 20 #"make-employee-record"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record3"
0 0 23 3 2 #" ("
0 0 14 3 20 #"make-employee-record"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"Ace\""
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"wage-record1"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-wage-record"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 3 #"600"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"wage-record2"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-wage-record"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 23 3 1 #" "
0 0 20 3 4 #"1200"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"lop000"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"lop001"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 11 #"punch-card1"
0 0 23 3 1 #" "
0 0 14 3 11 #"punch-card2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"loe000"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"loe001"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record1"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"loe002"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record3"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record2"
0 0 23 3 1 #" "
0 0 14 3 16 #"employee-record1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";;ASSUME: THERE IS AT MOST ONE PUNCH-CARD RECORD PER EMPLOYEE NUMBER"
 #"."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";;[Listof employee] [Listof punch-card] -> [Listof wage-record]"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";;Given a list of employee "
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; list of punch-card records."
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; produces a list of wage records. If no punch card match the emplo"
 #"yee"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #";;it is a error."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v3"
0 0 23 3 1 #" "
0 0 14 3 3 #"loe"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 61
#";;Employee-record [Listof punch-card] -> [Listof wage-record]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 42 #";;Given a employee then search the respons"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"search"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 3 #") ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 22 #"employee-record-number"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #") ("
0 0 14 3 17 #"punch-card-number"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 16 #"make-wage-record"
0 0 23 3 2 #" ("
0 0 14 3 20 #"employee-record-name"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 16 #"punch-card-hours"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 4 #")) ("
0 0 14 3 20 #"employee-record-rate"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"search"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 47 #";;Employee-record [Listof punch-card]-> Boolean"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 59
#";;Check wether the people information is on the punch-card."
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"exist?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 22 #"employee-record-number"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #") ("
0 0 14 3 17 #"punch-card-number"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 6 #"exist?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 7 #")))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 6 #"exist?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 3 #")) "
0 0 14 3 3 #"loe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 6 #"search"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 3 #")) "
0 0 14 3 3 #"loe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"wages*.v3"
0 0 23 3 1 #" "
0 0 19 3 34 #"\"No Punch-card Matches The Staff.\""
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"wages*.v3"
0 0 23 3 1 #" "
0 0 14 3 6 #"loe000"
0 0 23 3 1 #" "
0 0 14 3 6 #"lop000"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v3"
0 0 23 3 1 #" "
0 0 14 3 6 #"loe001"
0 0 23 3 1 #" "
0 0 14 3 6 #"lop001"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 14 3 12 #"wage-record1"
0 0 23 3 1 #" "
0 0 14 3 12 #"wage-record2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wages*.v3"
0 0 23 3 1 #" "
0 0 14 3 6 #"loe002"
0 0 23 3 1 #" "
0 0 14 3 6 #"lop001"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 5"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; [Listof Number] [Listof Number] -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; calculates the value for the combination of these numbers"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"value"
0 0 23 3 1 #" "
0 0 14 3 5 #"coeff"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"coeff"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"coeff"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 4 #")) ("
0 0 14 3 5 #"value"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"coeff"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"value"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"value"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"value"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 20 3 3 #"100"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 13 #";; Problem 6:"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";DNAprefix: [List-of Symbol] [List-of Symbol]-> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;check if the pattern is a identical to the initial part of the sea"
 #"rch string."
) 0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #";;and for [List-of Symbol], the symbol in the list only have 'a, 't,"
 #" 'c, 'g. "
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"DNAprefix"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";same-dna: [List-of Symbol] [List-of Symbol]-> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";;Whether the two list are same."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"same-dna"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 1 #" "
0 0 14 3 4 #"los2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"los2"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"los2"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 4 #"los2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"los2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"same-dna"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"los2"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"same-dna"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"same-dna"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";;Check is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; -false"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";; -error"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; -Symbol"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";;Assume the length of search is always equal or longer than pattern"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";;DNAdelta: [List-of Symbol] [List-of Symbol]-> Check "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";;returns the first item in the search string beyond the pattern. "
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #";;if the lists are identical and there is no DNA letter beyond the p"
 #"attern,"
) 0 0 23 29 1 #"\n"
0 0 17 3 37 #";;produece string:\"error: indentical\""
0 0 23 29 1 #"\n"
0 0 17 3 68
#";;If the pattern does not match the beginning of the search string, "
0 0 23 29 1 #"\n"
0 0 17 3 29 #";;the function returns false."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 44 #";;[List-of Symbol] [List-of Symbol]-> Answer"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 19 #";;Answer is one of:"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 9 #";; -false"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 10 #";; -Symbol"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 64
#";;return the first item in new search string beyond new pattern "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 54 #";;or false when same length of new pattern and search "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 65
#";;but the element in new pattern does not match new search string"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"again-check"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 5 #"))) ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  [("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 4 #")) ("
0 0 14 3 11 #"again-check"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 6 #"))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 8 #"same-dna"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 3 #") ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 18 #"\"error: identical\""
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 4 #")) ("
0 0 14 3 11 #"again-check"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"pattern"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"search"
0 0 23 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 23 3 4 #"])))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 2 #" ("
0 0 14 3 8 #"DNAdelta"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";;I think may be we can use DNAprefix as a very important helper fun"
 #"ction to define"
) 0 0 23 29 1 #"\n"
0 0 17 3 13 #";;DNAdelta.It"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 5 #" way "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 8 #"simplify"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 10 #" function."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 7"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";;The same to the problem 4."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 8:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"leaf"
0 0 23 3 4 #" ())"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 6 #"growth"
0 0 23 3 2 #" ("
0 0 14 3 4 #"next"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"fork"
0 0 23 3 2 #" ("
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 14 3 5 #"right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Tree is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; -- (make-leaf)"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; -- (make-growth Tree)"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; -- (make-fork Tree Tree)"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; Direction is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; -- 'left"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; -- 'right"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"make-growth"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-fork"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-fork"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree3"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree5"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-fork"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree4"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod1"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod3"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod4"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod5"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(a)."
0 0 23 29 1 #"\n"
0 0 17 3 11 #";;Template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"tree-template"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"growth?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"fork?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 14 3 2 #".."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"growth?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 13 #"tree-template"
0 0 23 3 2 #" ("
0 0 14 3 11 #"growth-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"fork?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 13 #"tree-template"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fork-left"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 13 #"tree-template"
0 0 23 3 2 #" ("
0 0 14 3 10 #"fork-right"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 5 #")]]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; Tree [Listof Direction] -> Tree"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";;The list of direction navigates the tree at the specified places."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"navigate"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 4 #"tree"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"growth?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 4 #"tree"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"fork?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #")) "
0 0 14 3 4 #"tree"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 4 #")) ("
0 0 14 3 9 #"make-leaf"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"growth?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"navigate"
0 0 23 3 2 #" ("
0 0 14 3 11 #"growth-next"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"fork?"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"left"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"navigate"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fork-left"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"               [("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"right"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"navigate"
0 0 23 3 2 #" ("
0 0 14 3 10 #"fork-right"
0 0 23 3 1 #" "
0 0 14 3 4 #"tree"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lod"
0 0 23 3 7 #"))])]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"navigate"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod4"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"navigate"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod4"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"navigate"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree3"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod2"
0 0 23 3 2 #") "
0 0 14 3 5 #"tree2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"navigate"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree4"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod5"
0 0 23 3 2 #") "
0 0 14 3 5 #"tree1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"navigate"
0 0 23 3 1 #" "
0 0 14 3 5 #"tree4"
0 0 23 3 1 #" "
0 0 14 3 4 #"lod1"
0 0 23 3 2 #") "
0 0 14 3 5 #"tree4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 9:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; An S-expr (S-expression) is one of: "
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; \342\200\223 Atom "
0 0 23 29 1 #"\n"
0 0 17 3 9 #"; \342\200\223 SL "
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; An SL [List-of S-expr] is one of: "
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; \342\200\223 empty "
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; \342\200\223 (cons S-expr SL) "
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; An Atom is one of: "
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; \342\200\223 Number "
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; \342\200\223 String "
0 0 23 29 1 #"\n"
0 0 17 3 12 #"; \342\200\223 Symbol"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";;S-expression -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";;check whethe S-expression is atom."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"hi\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";;Atom Atom -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";;Check whether two atoms are equal."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"atom=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"a1"
0 0 23 3 1 #" "
0 0 14 3 2 #"a2"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"atom=?"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 3 #"'13"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"atom=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"hi"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"atom=?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Good"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"atom=?"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"H\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"H\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";;(a). S-expressions S-expressions -> Any"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"sl-template"
0 0 23 3 1 #" "
0 0 14 3 2 #"sl"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"sl"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 2 #"sl"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"sl"
0 0 23 3 1 #")"
0 0 14 3 2 #".."
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 7 #"sl-temp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"sl"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 22 #"template-s-expressions"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #") ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #") ("
0 0 14 3 3 #"sl?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 11 #"sl-template"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sl?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #") ("
0 0 14 3 5 #"atom?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 11 #"sl-template"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sl?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #") ("
0 0 14 3 3 #"sl?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 11 #"sl-template"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 11 #"sl-template"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 21 #"template-s-expression"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(b)."
0 0 23 29 1 #"\n"
0 0 17 3 39 #";;atom [Listof S-expression] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";;Check whether the atom is in the [Listof S-expression]."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 14 3 4 #"atom"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 6 #"atom=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"atom"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 4 #")) ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 14 3 4 #"atom"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 14 3 4 #"atom"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 4 #")) ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 14 3 4 #"atom"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 7 #"))))]))"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 23 29 1 #"\n"
0 0 23 3 46 #"                                              "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"check"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 2 #"12"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";;S-expression S-expression -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;Whether the second  S-expressions contain the first S-expression b"
 #"ut"
) 0 0 23 29 1 #"\n"
0 0 17 3 29 #";;regardless of the ordering."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"atom?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 5 #"check"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #") "
0 0 14 3 2 #"s2"
0 0 23 3 3 #") ("
0 0 14 3 9 #"contains?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #") "
0 0 14 3 2 #"s2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #") "
0 0 14 3 2 #"s2"
0 0 23 3 3 #") ("
0 0 14 3 9 #"contains?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 2 #") "
0 0 14 3 2 #"s2"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";;S-expression S-expression -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; Whether the elements in two lists are the same."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"contains-same-atoms?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 14 3 2 #"s2"
0 0 23 3 1 #" "
0 0 14 3 2 #"s1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"contains-same-atoms?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #" () ("
0 0 19 3 3 #"\"r\""
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"r\""
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"contains-same-atoms?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"contains-same-atoms?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"contains-same-atoms?"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0           0 0           0 13 0 50 3 11 #"Welcome to "
0 0 52 3 8 #"DrRacket"
0 0 50 3 21 #", version 5.3.6 [3m]."
0 0 50 29 1 #"\n"
0 0 50 3 10 #"Language: "
0 0 53 3 32 #"Intermediate Student with lambda"
0 0 50 3 16 #"; memory limit: "
0 0 53 3 6 #"128 MB"
0 0 50 3 1 #"."
0 0 50 29 1 #"\n"
0 0 6 3 20 #"All 54 tests passed!"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"> "
0           0
