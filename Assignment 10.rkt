#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 2277 0 17 3 12 #";; Problem 1"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(a)."
0 0 23 29 1 #"\n"
0 0 17 3 26 #";;An [Listof X] is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";;-empty"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";;-(cons X [Listof X])"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; an [NEListof X] is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; -(cons X [Listof X])"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(b)."
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; Number (which is nonnegative) -> [NEListof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; Produces a List of all squares from 0 to the provided number."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-squares"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-squares"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sqr"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-squares"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"16"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-squares"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(c)."
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; a UOP is: Number -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; Number (nonnegative) UOP -> [NEListof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";; Produces a List of all results of o from 0 to the provided number"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-results"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"o"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 1 #"o"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-results"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 1 #"o"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 1 #"o"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-results"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-results"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 4 #"sub1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; Number (nonnegative) -> [NEListof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";;Use all-int-results to represent the all-int-squares."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-int-squares2"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"all-int-results"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 3 #"sqr"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-int-squares2"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 15 #"all-int-squares"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-int-squares2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 15 #"all-int-squares"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(d)."
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; Number (which is nonnegative) -> [NEListof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; Produces a List of all values doubled from 0 to the provided numb"
 #"er"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-doubles"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ["
0 0 17 3 19 #";; Number -> Number"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 17 3 29 #";; doubles the provided value"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"double"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"all-int-results"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 6 #"double"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-doubles"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-int-doubles"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(a)."
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; [List-of String] String -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; checks if the provided string is in the list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"find-string"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 3 #"los"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"find-string"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"find-string"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 19 3 7 #"\"foxes\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(b)."
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; [Listof String] String [String String-> Boolean] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; checks if the provided String is in the list."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"generic-find-string"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 5 #"funct"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 5 #"funct"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 3 #"los"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; [List-of String] String -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; checks if the provided string is in the list (case sensitive)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 26 #"find-string-case-sensitive"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"generic-find-string"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 8 #"string=?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 26 #"find-string-case-sensitive"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"find-string"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 26 #"find-string-case-sensitive"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 19 3 9 #"\"Piggies\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"find-string"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 19 3 7 #"\"foxes\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; [List-of String] String -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";; checks if the provided string is in the list (case insensitive)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 28 #"find-string-case-insensitive"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 19 #"generic-find-string"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 14 3 11 #"string-ci=?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 28 #"find-string-case-insensitive"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"LIttle\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"Piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"For\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 28 #"find-string-case-insensitive"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"all\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"liTTle\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggies\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"weNt\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 19 3 9 #"\"Piggies\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 28 #"find-string-case-insensitive"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"All\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tHe\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"little\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"piggIes\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"went\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tea\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 19 3 7 #"\"foxes\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; A Grade is: (make-grade Symbol Number) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"grade"
0 0 23 3 2 #" ("
0 0 14 3 6 #"letter"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; The Symbol in a Grade represents "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; 'A >= 90 "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; 'B >= 80 "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; 'C >= 70 "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; 'D >= 60 "
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; 'F < 60 "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; A [Listof Grades] ... "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 2 #"62"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 2 #"79"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"93"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"84"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 2 #"57"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 2 #"38"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"90"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"95"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 2 #"76"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"90"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 2 #"55"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 2 #"74"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"92"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"86"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 2 #"43"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 2 #"73"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"grades2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"99"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"86"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(a)."
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; [List-of Grade] -> [List-of Symbol]"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; returns the letter grade"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"log->los"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 12 #"grade-letter"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"log->los"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"log->los"
0 0 23 3 1 #" "
0 0 14 3 7 #"grades2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(b)."
0 0 23 29 1 #"\n"
0 0 17 3 27 #";;[List-of Grade] -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; finds the average score in the list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"average-grade"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 9 #"grade-num"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 14 3 1 #"a"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 3 #") ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"average-grade"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 2 #") "
0 0 20 3 7 #"74.1875"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"average-grade"
0 0 23 3 1 #" "
0 0 14 3 7 #"grades2"
0 0 23 3 2 #") "
0 0 20 3 4 #"92.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(c)."
0 0 23 29 1 #"\n"
0 0 17 3 36 #";;[List-of Grade] -> [List-of Grade]"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; removes all grades of 79 or less"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"all-above-79"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 20 3 2 #"79"
0 0 23 3 2 #" ("
0 0 14 3 9 #"grade-num"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))) "
0 0 14 3 3 #"log"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"all-above-79"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"93"
0 0 23 3 4 #")  ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"84"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"90"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"95"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"90"
0 0 23 3 4 #")  ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"92"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"86"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"all-above-79"
0 0 23 3 1 #" "
0 0 14 3 7 #"grades2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 7 #"grades2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(d)."
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; [List-of Grade] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; checks to see if there are no F grades"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"all-pass?"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"andmap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 2 #" ("
0 0 14 3 12 #"grade-letter"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 5 #")))) "
0 0 14 3 3 #"log"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"all-pass?"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"all-pass?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"all-above-79"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"all-pass?"
0 0 23 3 1 #" "
0 0 14 3 7 #"grades2"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(e)."
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; [List-of Grade] -> [List-of Grade] "
0 0 23 29 1 #"\n"
0 0 17 3 63
#";; adds 5 points to the each grade and updates the letter value"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"bonus"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #"[ "
0 0 17 3 16 #";;Grade-> Number"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 60
#";;Given a grade make it number add 5 and return that number."
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 9 #"grade-num"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 15 #";;Grade-> Grade"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 72
(
 #";; After add 5 points to each grade, show the new grade of this stud"
 #"ent."
) 0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"fix"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 20 3 2 #"90"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  [("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 20 3 2 #"80"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  [("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 20 3 2 #"70"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  [("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #") "
0 0 20 3 2 #"60"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add5"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 6 #"))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 3 #"fix"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"bonus"
0 0 23 3 1 #" "
0 0 14 3 6 #"grades"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 2 #"67"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"84"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"98"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"89"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 2 #"62"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 2 #"43"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"95"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"81"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"95"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 2 #"60"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 2 #"79"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"97"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"91"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 2 #"48"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 2 #"78"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"bonus"
0 0 23 3 1 #" "
0 0 14 3 7 #"grades2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 3 #"104"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-grade"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 2 #"91"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"child"
0 0 23 3 2 #" ("
0 0 14 3 6 #"father"
0 0 23 3 1 #" "
0 0 14 3 6 #"mother"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 4 #"date"
0 0 23 3 1 #" "
0 0 14 3 10 #"hair-color"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; A FTN (Family-tree-node) is one of: "
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; - empty "
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; - (make-child FTN FTN Symbol Number Symbol) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"person1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"John"
0 0 23 3 1 #" "
0 0 20 3 4 #"1984"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"person2"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Jane"
0 0 23 3 1 #" "
0 0 20 3 4 #"1985"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"person3"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"Terry"
0 0 23 3 1 #" "
0 0 20 3 4 #"1995"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"person4"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"Diana"
0 0 23 3 1 #" "
0 0 20 3 4 #"1995"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 7 #"person1"
0 0 23 3 1 #" "
0 0 14 3 7 #"person2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Kate"
0 0 23 3 1 #" "
0 0 20 3 4 #"2009"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT2"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 14 3 7 #"person3"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"Bob"
0 0 23 3 1 #" "
0 0 20 3 4 #"1970"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(a)."
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; FTN Number -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; returns the number of people born the given year or earlier"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 1 #" "
0 0 14 3 4 #"year"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 4 #"year"
0 0 23 3 2 #" ("
0 0 14 3 10 #"child-date"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 4 #"year"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 11 #"count-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 4 #"year"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 4 #"year"
0 0 23 3 3 #") ("
0 0 14 3 11 #"count-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 4 #"year"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 4 #"1990"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1990"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 20 3 4 #"2010"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"count-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1800"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(b)."
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; FTN Number -> [List-of String]"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; returns a list of all people born on or before the given year"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 6 #"child?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 10 #"child-date"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 10 #"child-name"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 3 #") ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 57 #"                                                        ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 57 #"                                                        ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1990"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"John"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Jane"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1984"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"John"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"search-tree-older"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1800"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 1 #"c"
0 0 17 3 2 #")."
0 0 23 29 1 #"\n"
0 0 17 3 16 #";;FTN-> Boolean "
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; Determine whether a family-tree-node contains an ancestor"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;with"
0 0 17 3 1 #" "
0 0 17 3 3 #"red"
0 0 17 3 1 #" "
0 0 17 3 4 #"hair"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 18 #" father's side and"
0 0 23 29 1 #"\n"
0 0 17 3 4 #";;an"
0 0 17 3 1 #" "
0 0 17 3 8 #"ancestor"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 3 #"red"
0 0 17 3 1 #" "
0 0 17 3 4 #"hair"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 19 #" the mother's side."
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"red-haired-ancestors?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 15 #";;FTN-> Boolean"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 17 3 69
(
 #";;Check one side wether there is a red hair in that side.           "
 #" "
) 0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"helper1"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 2 #" ("
0 0 14 3 16 #"child-hair-color"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 7 #"helper1"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 7 #"helper1"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 7 #")))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"             [("
0 0 14 3 6 #"child?"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 3 #") ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 7 #"helper1"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 7 #"helper1"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"ftn"
0 0 23 3 7 #")))])))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 21 #"red-haired-ancestors?"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 21 #"red-haired-ancestors?"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";;(d)."
0 0 23 29 1 #"\n"
0 0 17 3 16 #";;FTN FTN -> FTN"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";;Given two FTN use the first FTN to subtitude the second one father"
 #" part."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"update-father"
0 0 23 3 1 #" "
0 0 14 3 2 #"f1"
0 0 23 3 1 #" "
0 0 14 3 2 #"f2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"f1"
0 0 23 3 2 #") "
0 0 14 3 2 #"f2"
0 0 23 3 7 #"]      "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 2 #"f2"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 2 #"f1"
0 0 23 3 3 #") ("
0 0 14 3 10 #"child-name"
0 0 23 3 1 #" "
0 0 14 3 2 #"f1"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 10 #"child-date"
0 0 23 3 1 #" "
0 0 14 3 2 #"f1"
0 0 23 3 3 #") ("
0 0 14 3 16 #"child-hair-color"
0 0 23 3 1 #" "
0 0 14 3 2 #"f1"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"update-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT2"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Kate"
0 0 23 3 1 #" "
0 0 20 3 4 #"2009"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"update-father"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 1 #" "
0 0 14 3 7 #"person2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-child"
0 0 23 3 1 #" "
0 0 14 3 7 #"person2"
0 0 23 3 2 #" ("
0 0 14 3 12 #"child-mother"
0 0 23 3 1 #" "
0 0 14 3 3 #"FT1"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"Kate"
0 0 23 3 1 #" "
0 0 20 3 4 #"2009"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"update-father"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"update-father"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 7 #"person2"
0 0 23 3 2 #") "
0 0 14 3 7 #"person2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0           0           0 0           0 13 0 50 3 11 #"Welcome to "
0 0 52 3 8 #"DrRacket"
0 0 50 3 21 #", version 5.3.6 [3m]."
0 0 50 29 1 #"\n"
0 0 50 3 10 #"Language: "
0 0 53 3 32 #"Intermediate Student with lambda"
0 0 50 3 16 #"; memory limit: "
0 0 53 3 6 #"128 MB"
0 0 50 3 1 #"."
0 0 50 29 1 #"\n"
0 0 6 3 20 #"All 39 tests passed!"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"> "
0           0
