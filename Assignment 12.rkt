#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 15
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 20 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1           0 3171 0 17 3 12 #";;Problem 1:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";;Natural is natural number which is greater or equal than 0."
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;Natural -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";;Given a natural number check wehther it is a prime number"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" [ "
0 0 17 3 35 #";;Natural Natural-> [Listof Natural"
0 0 17 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 66
#";;List all the factors of n (which is greater or equal than 2)    "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"factor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 2 #" ("
0 0 14 3 6 #"factor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"factor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 7 #")))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 5 #"))) ("
0 0 14 3 6 #"factor"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 8 #"))))])))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";;Natural -> [Listof Natural]"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";;Given a Natural Number n,"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";;produces the list of prime numbers up to n."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"list-primes"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 6 #"prime?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 23 3 2 #"  "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"list-primes"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"list-primes"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 1 #" "
0 0 20 3 2 #"17"
0 0 23 3 1 #" "
0 0 20 3 2 #"19"
0 0 23 3 1 #" "
0 0 20 3 2 #"23"
0 0 23 3 1 #" "
0 0 20 3 2 #"29"
0 0 23 3 1 #" "
0 0 20 3 2 #"31"
0 0 23 3 1 #" "
0 0 20 3 2 #"37"
0 0 23 3 1 #" "
0 0 20 3 2 #"41"
0 0 23 3 1 #" "
0 0 20 3 2 #"43"
0 0 23 3 1 #" "
0 0 20 3 2 #"47"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"list-primes"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 2:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;String ->String"
0 0 23 29 1 #"\n"
0 0 17 3 102
(
 #";;Given a non-empty String and constructs a palindrome by mirroring "
 #"the String around the last letter."
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-palindrome"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 18 #";;String -> String"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 68
#";;Given a word, produce a new word but in opposite letter direction."
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 6 #"helper"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 9 #"))))]))] "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-palindrome"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"123\""
0 0 23 3 2 #") "
0 0 19 3 7 #"\"12321\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-palindrome"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"How are you\""
0 0 23 3 2 #") "
0 0 19 3 23 #"\"How are youoy era woH\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"make-palindrome"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Terry\""
0 0 23 3 2 #") "
0 0 19 3 11 #"\"TerryrreT\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";;String -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";;Determine wether this string is a palindrome."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"is-palindrome?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 4 #"odd?"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 7 #"implode"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 23 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"even?"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 7 #"implode"
0 0 23 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 23 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"quotient"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"quotient"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"is-palindrome?"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"abcba\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"is-palindrome?"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"1234554321\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"is-palindrome?"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"affairsjsks\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";;Problem 3:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";;Number -> Number "
0 0 23 29 1 #"\n"
0 0 17 3 60
#";;Given a Natural Number and produces its Fibonacci number. "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 2 #") "
0 0 20 3 2 #"89"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #") "
0 0 20 3 1 #"8"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;Natural -> Natural"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";;Given a Natural Number and produces its Fibonacci number."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 2 #" ["
0 0 17 3 34 #";;Number Number Natural -> Natural"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 78
(
 #";;Given the first Fibonacci number, a accumulator and the natural nu"
 #"mber which"
) 0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 17 3 58
#";;return the Fibonacci number of that natural number      "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"acc-fibonacci"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 3 #"acc"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 13 #"acc-fibonacci"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 6 #"))]))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 13 #"acc-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 5 #")])))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 2 #") "
0 0 20 3 2 #"89"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #") "
0 0 20 3 1 #"8"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";;Natural -> [Listof Natural]"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";;consumes a Natural Number and produces "
0 0 23 29 1 #"\n"
0 0 17 3 5 #";;the"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 32 #"Fibonacci numbers from F0 to Fn."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"list-fibonacci"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 19 #"effective-fibonacci"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"list-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 1 #" "
0 0 20 3 2 #"21"
0 0 23 3 1 #" "
0 0 20 3 2 #"34"
0 0 23 3 1 #" "
0 0 20 3 2 #"55"
0 0 23 3 1 #" "
0 0 20 3 2 #"89"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"list-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"list-fibonacci"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"card"
0 0 23 3 2 #" ("
0 0 14 3 5 #"value"
0 0 23 3 1 #" "
0 0 14 3 4 #"suit"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; a card is a (make-card Number Suit)"
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #"; value indicates the value of the card (aces are low) 2 -> 11 -> ja"
 #"ck etc. "
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; a Suit is a symbol which is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 9 #"; 'hearts"
0 0 23 29 1 #"\n"
0 0 17 3 9 #"; 'spades"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; 'diamonds"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; 'clubs"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"play"
0 0 23 3 2 #" ("
0 0 14 3 6 #"player"
0 0 23 3 1 #" "
0 0 14 3 4 #"card"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; a Play is a (make-play String Card)."
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";;A (make-play p c) which p is the name of the player, c is the card"
 #" of player "
) 0 0 23 29 1 #"\n"
0 0 17 3 7 #";;hold."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"wins"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; a Wins is a (make-wins String Number)"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; A (make-wins n c) which n represent the name of the winner,"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";;c represents the number of the player wining the game."
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"LOWCARD"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"LOWPLAY"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 38 #"\"Error! You shouldn't be seeing this!\""
0 0 23 3 1 #" "
0 0 14 3 7 #"LOWCARD"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";;card example:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"clubs2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"clubs9"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"diamonds5"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"diamonds2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"heart5"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"heart"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"heart7"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"heart"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"spades6"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"spades2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"clubs11"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"diamonds12"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"spades7"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";;play example:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"claire\""
0 0 23 3 1 #" "
0 0 14 3 6 #"clubs2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"terry\""
0 0 23 3 1 #" "
0 0 14 3 6 #"clubs9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"jason\""
0 0 23 3 1 #" "
0 0 14 3 9 #"diamonds5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"cici\""
0 0 23 3 1 #" "
0 0 14 3 9 #"diamonds2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe5"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"ll\""
0 0 23 3 1 #" "
0 0 14 3 6 #"heart5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe6"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #" "
0 0 14 3 6 #"heart7"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe7"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"aci\""
0 0 23 3 1 #" "
0 0 14 3 7 #"spades7"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;listof play example (trick example)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe2"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe3"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe5"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe6"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe3"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick3"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe6"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe3"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick4"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe3"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe5"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe6"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe7"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick5"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe1"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe4"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe6"
0 0 23 3 1 #" "
0 0 14 3 3 #"pe7"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; bettersuit?: Card Card -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; Checks if the first card has a better suit than the second."
0 0 23 29 1 #"\n"
0 0 17 3 61
#";; we (assuming that they are different and have same values."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 1 #" "
0 0 14 3 5 #"card1"
0 0 23 3 1 #" "
0 0 14 3 5 #"card2"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 2 #" ("
0 0 14 3 9 #"card-suit"
0 0 23 3 1 #" "
0 0 14 3 5 #"card1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 2 #" ("
0 0 14 3 9 #"card-suit"
0 0 23 3 1 #" "
0 0 14 3 5 #"card2"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"             [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"hearts"
0 0 23 3 2 #" ("
0 0 14 3 9 #"card-suit"
0 0 23 3 1 #" "
0 0 14 3 5 #"card1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 2 #" ("
0 0 14 3 9 #"card-suit"
0 0 23 3 1 #" "
0 0 14 3 5 #"card2"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"hearts"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"hearts"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"clubs"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"hearts"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"diamonds"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"heart"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 9 #"make-card"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"spades"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; highcard-bettersuit: [listof Play] -> String"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; given a trick which have two palyer (four cards)"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; and returns the winner based on trick card rule :"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; 1. high value card won"
0 0 23 29 1 #"\n"
0 0 17 3 89
(
 #";; 2. In the case of a tie i.e. two or more cards of the same value "
 #"are played the trick "
) 0 0 23 29 1 #"\n"
0 0 17 3 81
(
 #";; goes to the player with the better suit. (Clubs < Diamonds < Hear"
 #"ts < Spades) "
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 5 #"trick"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"play-player"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                           [("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 10 #"card-value"
0 0 23 3 2 #" ("
0 0 14 3 9 #"play-card"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #")) ("
0 0 14 3 10 #"card-value"
0 0 23 3 2 #" ("
0 0 14 3 9 #"play-card"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"card-value"
0 0 23 3 2 #" ("
0 0 14 3 9 #"play-card"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #")) ("
0 0 14 3 10 #"card-value"
0 0 23 3 2 #" ("
0 0 14 3 9 #"play-card"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 5 #"))) ("
0 0 14 3 11 #"bettersuit?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"play-card"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 9 #"play-card"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 6 #"))))  "
0 0 14 3 1 #"p"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 7 #"LOWPLAY"
0 0 23 3 1 #" "
0 0 14 3 5 #"trick"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"terry\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick2"
0 0 23 3 2 #") "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick4"
0 0 23 3 2 #") "
0 0 19 3 5 #"\"aci\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick3"
0 0 23 3 2 #") "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick5"
0 0 23 3 2 #") "
0 0 19 3 5 #"\"aci\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; namecounter: String [Listof String] -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; compute the number of occurances of the string in a list of strin"
 #"g."
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"claire\""
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"cici\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"aci\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"cici\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"jason\""
0 0 23 3 3 #")) "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"namecounter"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"claire\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"cici\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"claire\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"claire\""
0 0 23 3 1 #" "
0 0 19 3 4 #"\"ii\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"claire\""
0 0 23 3 3 #")) "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; winners: [Listof [Listof Play]] -> [Listof Win]"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";; produces a list of win which record how many times players have w"
 #"on in that game"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"winners"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-wins"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 11 #"namecounter"
0 0 23 3 2 #" ("
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 19 #"highcard-bettersuit"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 5 #"))) ("
0 0 14 3 7 #"winners"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lop"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"winners"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick2"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick3"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"terry\""
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"aci\""
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"winners"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"terry\""
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; gamewinner: [listof [listof Play]] -> String"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; produce the name of the player who won most tricks"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"gamewinner"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 9 #"wins-name"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 10 #"wins-count"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 10 #"wins-count"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 9 #"make-wins"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"ERROR\""
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 7 #"winners"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"gamewinner"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"ERROR\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"gamewinner"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 3 #")) "
0 0 19 3 7 #"\"terry\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"gamewinner"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick2"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick3"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick4"
0 0 23 3 3 #")) "
0 0 19 3 5 #"\"dan\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"gamewinner"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick1"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick2"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick3"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick4"
0 0 23 3 1 #" "
0 0 14 3 6 #"trick5"
0 0 23 3 3 #")) "
0 0 19 3 5 #"\"aci\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Problem 5"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 2 #" ("
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 14 3 5 #"right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; a Node is one of "
0 0 23 29 1 #"\n"
0 0 17 3 4 #";- ("
0 0 17 3 9 #"make-node"
0 0 17 3 1 #" "
0 0 17 3 3 #"Btn"
0 0 17 3 6 #" Btn) "
0 0 23 29 1 #"\n"
0 0 17 3 22 #";- (make-node Bts Bts)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; a Btn (Binary Tree of Numbers) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; Number"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; (make-node Btn Btn)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"Btn1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"Btn2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 20 3 1 #"6"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; a Bts (Binary tree of Symbols) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; Symbol"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; (make-node Bts Bts)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"Bts1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"Aba"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"chalk"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"paper"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"Bts2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"penny"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"nickel"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"dime"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"quarter"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"dollar"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; a BtX (Binary tree of X) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 3 #"; X"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; (make-node BtX BtX)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; BtX -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; counts the largest number of nodes you can travel to get to a lea"
 #"f"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"height"
0 0 23 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 23 3 1 #" "
0 0 14 3 3 #"btx"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"yes"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"no"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"maybe"
0 0 23 3 4 #"))) "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"height"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 3 #")) "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; a Lbt (Leafy Bianary Tree) is one of "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 7 #"; 'leaf"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 17 3 21 #"; (make-node Lbt Lbt)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; Number -> [Listof Lbt]"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; produces a list of all Lbt with the given height"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";;create-leafy-binary<: Number-> [Listof BT]"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";;takes a number and return all BT of height less than n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";;add: BT [Listof BT] -> [Listof BT]"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";;takes a Bt and a list of BT"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";;and returns a list of BT that "
0 0 23 29 1 #"\n"
0 0 17 3 53 #";;add the given BT to every element of the list of BT"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"add"
0 0 23 3 1 #" "
0 0 14 3 2 #"bt"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobt"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobt"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 14 3 2 #"bt"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobt"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 3 #"add"
0 0 23 3 1 #" "
0 0 14 3 2 #"bt"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobt"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 61
#"                                                            ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 67
#"                                                                  ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";;branch: [Listof BT] [Listof BT] -> [Listof BT]"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";;takes two list of BT"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;and returns a list of BT which combine the given list of BT togeth"
 #"er"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"branch"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 3 #"add"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #") "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"branch"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #") "
0 0 14 3 1 #"b"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"branch"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"branch"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"branch"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";;all-bt: Number -> [Listof BT]"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";;consumes a natural number n "
0 0 23 29 1 #"\n"
0 0 17 3 60
#";;and creates (a list of) all leafy binary trees of height n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 6 #"branch"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 6 #"all-bt"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"branch"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 6 #"branch"
0 0 23 3 2 #" ("
0 0 14 3 20 #"create-leafy-binary<"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 6 #"all-bt"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 7 #"))))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                         ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                         ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"all-bt"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"leaf"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0           0 0           0 13 0 50 3 11 #"Welcome to "
0 0 52 3 8 #"DrRacket"
0 0 50 3 21 #", version 5.3.6 [3m]."
0 0 50 29 1 #"\n"
0 0 50 3 10 #"Language: "
0 0 53 3 32 #"Intermediate Student with lambda"
0 0 50 3 16 #"; memory limit: "
0 0 53 3 6 #"128 MB"
0 0 50 3 1 #"."
0 0 50 29 1 #"\n"
0 0 6 3 20 #"All 63 tests passed!"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"> "
0           0
